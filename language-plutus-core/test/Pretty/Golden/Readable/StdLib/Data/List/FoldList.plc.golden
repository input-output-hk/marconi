/\(a :: *) -> /\(r :: *) -> \(f : r -> a -> r) -> (/\(a :: *) -> /\(b :: *) -> \(f : (a -> b) -> a -> b) -> (/\(a :: *) -> \(s : (\(a :: *) -> (\(k :: (* -> *) -> *) -> k (\(r :: *) -> r)) (\(spine :: * -> *) -> ifix (\(b :: (* -> *) -> *) -> \(p :: * -> *) -> p ((\(self :: *) -> self -> a) ((\(k :: (* -> *) -> *) -> k (\(r :: *) -> r)) b))) spine)) a) -> unwrap s s) {a -> b} (wrap (\(b :: (* -> *) -> *) -> \(p :: * -> *) -> p ((\(self :: *) -> (\(a :: *) -> self -> a) (a -> b)) ((\(k :: (* -> *) -> *) -> k (\(r :: *) -> r)) b))) (\(r :: *) -> r) (\(s : (\(a :: *) -> (\(k :: (* -> *) -> *) -> k (\(r :: *) -> r)) (\(spine :: * -> *) -> ifix (\(b :: (* -> *) -> *) -> \(p :: * -> *) -> p ((\(self :: *) -> self -> a) ((\(k :: (* -> *) -> *) -> k (\(r :: *) -> r)) b))) spine)) (a -> b)) -> \(x : a) -> f ((/\(a :: *) -> \(s : (\(a :: *) -> (\(k :: (* -> *) -> *) -> k (\(r :: *) -> r)) (\(spine :: * -> *) -> ifix (\(b :: (* -> *) -> *) -> \(p :: * -> *) -> p ((\(self :: *) -> self -> a) ((\(k :: (* -> *) -> *) -> k (\(r :: *) -> r)) b))) spine)) a) -> unwrap s s) {a -> b} s) x))) {r} {(\(a :: *) -> (\(k :: (* -> *) -> *) -> k (\(r :: *) -> r)) (\(spine :: * -> *) -> ifix (\(b :: (* -> *) -> *) -> \(p :: * -> *) -> p ((\(list :: *) -> all (r :: *). r -> (a -> list -> r) -> r) ((\(k :: (* -> *) -> *) -> k (\(r :: *) -> r)) b))) spine)) a -> r} (\(rec : r -> (\(a :: *) -> (\(k :: (* -> *) -> *) -> k (\(r :: *) -> r)) (\(spine :: * -> *) -> ifix (\(b :: (* -> *) -> *) -> \(p :: * -> *) -> p ((\(list :: *) -> all (r :: *). r -> (a -> list -> r) -> r) ((\(k :: (* -> *) -> *) -> k (\(r :: *) -> r)) b))) spine)) a -> r) -> \(z : r) -> \(xs : (\(a :: *) -> (\(k :: (* -> *) -> *) -> k (\(r :: *) -> r)) (\(spine :: * -> *) -> ifix (\(b :: (* -> *) -> *) -> \(p :: * -> *) -> p ((\(list :: *) -> all (r :: *). r -> (a -> list -> r) -> r) ((\(k :: (* -> *) -> *) -> k (\(r :: *) -> r)) b))) spine)) a) -> unwrap xs {r} z (\(x : a) -> \(xs' : (\(a :: *) -> (\(k :: (* -> *) -> *) -> k (\(r :: *) -> r)) (\(spine :: * -> *) -> ifix (\(b :: (* -> *) -> *) -> \(p :: * -> *) -> p ((\(list :: *) -> all (r :: *). r -> (a -> list -> r) -> r) ((\(k :: (* -> *) -> *) -> k (\(r :: *) -> r)) b))) spine)) a) -> rec (f z x) xs'))