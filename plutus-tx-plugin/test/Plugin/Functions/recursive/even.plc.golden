(program
  (let
    (nonrec)
    (termbind
      (strict)
      (vardecl
        subtractInteger (fun (con integer) (fun (con integer) (con integer)))
      )
      (lam
        x
        (con integer)
        (lam y (con integer) [ [ (builtin subtractInteger) x ] y ])
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (termbind
      (strict)
      (vardecl equalsInteger (fun (con integer) (fun (con integer) Bool)))
      (lam
        x
        (con integer)
        (lam
          y
          (con integer)
          [
            [
              [
                { (builtin ifThenElse) Bool }
                [ [ (builtin equalsInteger) x ] y ]
              ]
              True
            ]
            False
          ]
        )
      )
    )
    (let
      (rec)
      (termbind
        (strict)
        (vardecl even (fun (con integer) Bool))
        (lam
          n
          (con integer)
          {
            [
              [
                {
                  [ Bool_match [ [ equalsInteger n ] (con integer 0) ] ]
                  (all dead (type) Bool)
                }
                (abs dead (type) True)
              ]
              (abs
                dead
                (type)
                (let
                  (nonrec)
                  (termbind
                    (nonstrict)
                    (vardecl n (con integer))
                    [ [ subtractInteger n ] (con integer 1) ]
                  )
                  {
                    [
                      [
                        {
                          [ Bool_match [ [ equalsInteger n ] (con integer 0) ] ]
                          (all dead (type) Bool)
                        }
                        (abs dead (type) False)
                      ]
                      (abs
                        dead
                        (type)
                        [ even [ [ subtractInteger n ] (con integer 1) ] ]
                      )
                    ]
                    (all dead (type) dead)
                  }
                )
              )
            ]
            (all dead (type) dead)
          }
        )
      )
      even
    )
  )
)