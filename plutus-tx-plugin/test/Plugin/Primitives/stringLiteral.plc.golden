(program
  (let
    (nonrec)
    (termbind
      (strict)
      (vardecl appendString (fun (con string) (fun (con string) (con string))))
      (lam
        arg (con string) (lam arg (con string) [ [ (builtin append) arg ] arg ])
      )
    )
    (termbind
      (strict)
      (vardecl charToString (fun (con char) (con string)))
      (lam arg (con char) [ (builtin charToString) arg ])
    )
    (termbind (strict) (vardecl emptyString (con string)) (con ""))
    (let
      (rec)
      (datatypebind
        (datatype
          (tyvardecl List (fun (type) (type)))
          (tyvardecl a (type))
          Nil_match
          (vardecl Nil [List a]) (vardecl Cons (fun a (fun [List a] [List a])))
        )
      )
      (let
        (nonrec)
        (datatypebind
          (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
        )
        (let
          (rec)
          (termbind
            (nonstrict)
            (vardecl
              foldr
              (all a (type) (all b (type) (fun (fun a (fun b b)) (fun b (fun [List a] b)))))
            )
            (abs
              a
              (type)
              (abs
                b
                (type)
                (lam
                  f
                  (fun a (fun b b))
                  (lam
                    acc
                    b
                    (lam
                      l
                      [List a]
                      [
                        [
                          [
                            { [ { Nil_match a } l ] (fun Unit b) }
                            (lam thunk Unit acc)
                          ]
                          (lam
                            x
                            a
                            (lam
                              xs
                              [List a]
                              (lam
                                thunk
                                Unit
                                [
                                  [ f x ] [ [ [ { { foldr a } b } f ] acc ] xs ]
                                ]
                              )
                            )
                          )
                        ]
                        Unit
                      ]
                    )
                  )
                )
              )
            )
          )
          (let
            (nonrec)
            (termbind
              (nonstrict)
              (vardecl
                fIsStringString_cfromString (fun [List (con char)] (con string))
              )
              [
                [
                  { { foldr (con char) } (con string) }
                  (lam
                    a
                    (con char)
                    (lam
                      m (con string) [ [ appendString [ charToString a ] ] m ]
                    )
                  )
                ]
                emptyString
              ]
            )
            (termbind
              (nonstrict)
              (vardecl
                fIsStringString
                [(lam a (type) (fun [List (con char)] a)) (con string)]
              )
              fIsStringString_cfromString
            )
            (termbind
              (strict)
              (vardecl
                fromString
                (all a (type) (fun [(lam a (type) (fun [List (con char)] a)) a] (fun [List (con char)] a)))
              )
              (abs
                a (type) (lam v [(lam a (type) (fun [List (con char)] a)) a] v)
              )
            )
            [
              [ { fromString (con string) } fIsStringString ]
              [
                [ { Cons (con char) } (con 'a') ]
                [
                  [ { Cons (con char) } (con 'b') ]
                  [ [ { Cons (con char) } (con 'c') ] { Nil (con char) } ]
                ]
              ]
            ]
          )
        )
      )
    )
  )
)