module Component.$name
  ( component
  , $lname
  , $lnameSlot
  , module Types
  ) where

import Prologue
import Component.$name.State (handleAction, initialState)
import Component.$name.Types (Component, Input, Msg, Query, Slot)
import Component.$name.Types as Types
import Component.$name.View (render)
import Data.Symbol (SProxy(..))
import Halogen as H
import Halogen.HTML (text)

$lnameSlot :: SProxy "$lnameSlot"
$lnameSlot = SProxy

$lname ::
  forall slots slot action m.
  Ord slot =>
  Monad m =>
  slot ->
  Input ->
  (Msg -> action) ->
  H.ComponentHTML action ( $lnameSlot :: Slot slot | slots ) m
$lname slot input = HH.slot $lnameSlot slot component input <<< Just

component :: forall m. Monad m => Component m
component =
  H.mkComponent
    { initialState
    , render
    , eval:
        H.mkEval
          H.defaultEval
            { handleAction = handleAction
            , initialize = Just Init
            , receive = Just <<< Receive
            }
    }
