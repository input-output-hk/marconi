module Page.$name
  ( component
  , $lnamePage
  , $lnamePageSlot
  , module Types
  ) where

import Prologue
import Page.$name.State (handleAction, initialState)
import Page.$name.Types (Component, Input, Msg, Query, Slot)
import Page.$name.Types as Types
import Page.$name.View (render)
import Data.Symbol (SProxy(..))
import Halogen as H
import Halogen.HTML (text)

$lnamePageSlot :: SProxy "$lnamePageSlot"
$lnamePageSlot = SProxy

$lnamePage ::
  forall slots action m.
  Monad m =>
  Input ->
  (Msg -> action) ->
  H.ComponentHTML action ( $lnamePageSlot :: Slot | slots ) m
$lnamePage slot input = HH.slot $lnamePageSlot slot component input <<< Just

component :: forall m. Monad m => Component m
component =
  H.mkComponent
    { initialState
    , render
    , eval:
        H.mkEval
          H.defaultEval
            { handleAction = handleAction
            , initialize = Just Init
            , receive = Just <<< Receive
            }
    }
